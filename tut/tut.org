#+begin_export latex
\section*{Introduction}
We start our exploration of \ty{stan} by running it in default mode on
the command line with a seeded random number generator (\ty{-s}) to
make the results reproducible.
#+end_export
#+begin_src sh <<cli>>=
  stan -s 3
#+end_src
#+begin_export latex
This generates two directories, \ty{targets} and \ty{neighbors}, each
with 10 sequences of 10 kb. The neighbors contain a 1 kb deletion from
position 4501 to 5500. We should be able to detect this region with
\ty{fur}. To do so, we first make a \ty{fur} database,
#+end_export
#+begin_src sh <<cli>>=
  makeFurDb -t targets -n neighbors -d test.db
#+end_src
#+begin_export latex
and then run \ty{fur} on that database.
#+end_export
#+begin_src sh <<cli>>=
  fur -d test.db
#+end_src
#+begin_export latex
That's the bird's eye view of \ty{stan}. In the following three
sections we explore three aspects of \ty{stan}: mutation rates, the
coalescent along which mutations take place, and the haplotypes
generated from the mutations. Since \ty{stan} is a highly stochastic
program, we shall seed its random number generator to make its results
reproducible.
\section{Mutation Rates}
The program \ty{stan} simulates two sets of sequences, targets and
neighbors. The target sequences may contain one or more regions that
are absent from the neighbors. These are the regions we aim to
identify in neighbor-based marker discovery. By default, the target
regions are deleted in the neighbor sequences. Alternatively, the user
can also mutate them. However, if
we set the mutation rate to, say 0.5, the one or more target regions are often
undetectable as they haven't been erased thoroughly enough from the
neighbors. In this run of \ty{stan} we overwrite the current target
and neighbor directories with \ty{-o}.
#+end_export
#+begin_src sh <<cli>>=
  stan -s 3 -M 0.5 -o
  makeFurDb -t targets/ -n neighbors/ -d test.db -o
  fur -d test.db
#+end_src
#+begin_export latex
\section*{The Coalescent}
As explained in the Introduction, \ty{stan} is based on the
coalescent, a random genealogy of the target and neighbor
sequences. In this genealogy the deepest split is always between the
targets and the neighbors. To explore the coalescent, we can print it
and then plot it using the program \ty{plotTree}, which is part of the
biobox collection of
programs\footnote{\ty{github.com/evolbioinf/biobox}}. The resulting tree is shown in Figure~\ref{fig:coa}A.
\begin{figure}
  \begin{center}
    \begin{tabular}{cc}
      \textbf{A} & \textbf{B}\\
      \includegraphics{../stan/coa} & \includegraphics{../stan/phy}
    \end{tabular}
  \end{center}
  \caption{The coalescent generated by \ty{stan} (\textbf{A}) and its
    reconstruction from the sequences with default mutation rates
    (\textbf{B}).}\label{fig:coa}
\end{figure}
#+end_export
#+begin_src sh <<cli>>=
  stan -s 3 -o -c | plotTree
#+end_src
#+begin_export latex
We now reconstruct the phylogeny of the target and neighbor
sequences. For this we calculate their pairwise distances with
\ty{phylonium}~\cite{klo20:phy}, summarize these distances into a
neighbor-joining tree with \ty{nj}, midpoint root this tree with
\ty{midRoot}, and again plot it with \ty{plotTree}. Like
\ty{plotTree}, the programs \ty{nj} \ty{midRoot} are part of the
biobox, while \ty{phylonium} is available from all standard package
repositories. Figure~\ref{fig:coa}B shows the resulting tree, which
has a topology that is compatible with the underlying coalescent.
#+end_export
#+begin_src sh <<cli>>=
  phylonium targets/* neighbors/* |
      nj |
      midRoot |
      plotTree
#+end_src
#+begin_export latex
\section{Haplotypes}
Coalescent simulations initially generate haplotypes, which are then
converted to sequences. To see the relationship between sequences and
the underlying haplotypes, we run \ty{stan} with a low mutation rate
and print the haplotyes with \ty{-o}.
#+end_export
#+begin_src sh <<cli>>=
  stan -s 3 -o -M 0.001 -m 0.001 -a
#+end_src
#+begin_export latex
\begin{figure}
\begin{verbatim}
Positions: 5245 7686 8397 9386 5944 9784 8968 6751 5217 4812 2322 \
5291 7975 2807 6840 4524 6826 7689 8066 2146
t1  11110000000000000000
t2  11111000000000000000
t3  11110000000000000000
t4  11110000000000000000
t5  11110000000000000000
t6  11110010000000000000
t7  11110000000000000000
t8  11110001000000000000
t9  11110000000000000000
t10 11110100000000000000
n1  00000000111111110000
n2  00000000111111101000
n3  00000000111111100100
n4  00000000111111100010
n5  00000000111111100010
n6  00000000111111100000
n7  00000000111111100000
n8  00000000111111100010
n9  00000000111111100010
n10 00000000111111100011
\end{verbatim}
\caption{Haplotypes from a \ty{stan} run.}\label{fig:hap}
\end{figure}

As shown in Figure~\ref{fig:hap}, the haplotypes printed by \ty{stan}
consist of a row of positions of their segregating sites followed by a
table of sequence names and strings of zeros and ones indicating
ancestral state and mutation. In our example the fifth segregating
site is a singleton in sequence \ty{t2} at position 5944. We can cut
out that position from \ty{t2} using the program \ty{cutSeq} from the
biobox to find that is a \ty{G}.
#+end_export
#+begin_src sh <<cli>>=
  cutSeq -r 5944-5944 targets/t2.fasta
#+end_src
#+begin_export latex
As suggested by the mutation pattern of that segregating site, all
other sequences in the sample don't have \ty{G} at that position. In
fact, we find they have \ty{A}, when we look up three examples.
#+end_export
#+begin_src sh <<cli>>=
  cutSeq -r 5944-5944 targets/t1.fasta
  cutSeq -r 5944-5944 targets/t3.fasta
  cutSeq -r 5944-5944 neighbors/n1.fasta
#+end_src
